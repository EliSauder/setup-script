#!/bin/bash

EMAIL_REGEX="^[a-z0-9!#\$%&'*+/=?^_\`{|}~-]+(\.[a-z0-9!#$%&'*+/=?^_\`{|}~-]+)*@([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]([a-z0-9-]*[a-z0-9])?\$"
NUMBER_REGEX='^[0-9]+$'

userInputFinished=false
gitEmail=""

while [ "$userInputFinished" = false ]; do

    printf "Enter email for git: "
    read gitEmail

    if [[ $gitEmail =~ $EMAIL_REGEX ]]; then
        userInputFinished=true
    else
        printf "\nInvalid Email.\n\n"
    fi

done

userInputFinished=false
gitUserName=""

while [ "$userInputFinished" = false ]; do

    printf "Enter username for git: "
    read gitUserName

    if ! [ -z "$gitUserName" ]; then
        userInputFinished=true
    else
        printf "\n Username cannot be blank.\n\n"
    fi

done

git config --global user.email "$gitEmail"
git config --global user.name "$gitUserName"


printf "Would you like to setup SSH for git (y/n)? "
read setupSSH

if [ "$setupSSH" = "y" ] || [ "$setupSSH" = "Y" ]; then
    listOfPossibleKeys=()
    if [ -d "$HOME/.ssh" ]; then
        shopt -s nullglob
        listOfPossibleKeys=($HOME/.ssh/*)
        shopt -u nullglob
    fi

    listOfPossibleKeys+=($(/bin/cat ~/.user-setup/user-ssh-keys.txt | tr '\n' ' '))

    if ! [ "${#listOfPossibleKeys[@]}" = 0 ]; then

        printf "\nYou already have ssh keys defined, would you like to use one of the existing keys?\n"
        for i in "${!listOfPossibleKeys[@]}"; do
            printf " - (%d) %s\n" "$(($i + 1))" "${listOfPossibleKeys[$i]}"
        done
        
        userInputFinished=false

        while [ "$userInputFinished" = false ]; do
        
            printf "Select a number 1 - ${#listOfPossibleKeys[@]} (leave blank to create a new key): "
            read keyToUse

            if [ -z "$keyToUse" ]; then
                userInputFinished=true
            elif ! [[ $keyToUse =~ $NUMBER_REGEX ]]; then
                printf "\nPlease enter a number.\n\n"
            else 
                if [ $(($keyToUse)) \> ${#listOfPossibleKeys[@]} ]; then
                    printf "\nPlease enter a number <= ${#listOfPossibleKeys[@]}"
                elif [ $(($keyToUse)) \< 1 ]; then
                    printf "\nPlease enter a number >= 1"
                fi
            fi

        done

    fi

fi