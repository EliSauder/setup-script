#!/bin/bash

sshAlgorithms=("rsa" "ed25519")
sshKeySizes=('keySizes=(1024 2048 4096)' 'keySizes=()')

EMAIL_REGEX="^(([A-Za-z0-9]+((\.|\-|\_|\+)?[A-Za-z0-9]?)*[A-Za-z0-9]+)|[A-Za-z0-9]+)@(([A-Za-z0-9]+)+((\.|\-|\_)?([A-Za-z0-9]+)+)*)+\.([A-Za-z]{2,})+$"
NUMBER_REGEX='^[0-9]+$'

args=("$@")

displayKeyWhenDone=false
replaceSSHKey=false

counter=0
for arg in "$@"; do
    if [ "$arg" = "-e" ]; then
        emailArgument=$(($counter + 1))
    elif [ "$arg" = "-d" ]; then
        displayKeyWhenDone=true
    elif [ "$arg" = "-r" ]; then
        replaceSSHKey=true
    elif [ "$arg" = "-a" ]; then
        algorithmArgument=$(($counter + 1))
    elif [ "$arg" = "-k" ]; then
        keySizeArgument=$(($counter + 1))
    elif [ "$arg" = "-f" ]; then
        fileArgument=$(($counter + 1))
    fi
    counter=$(($counter + 1))
done

if ! [ -z "$emailArgument" ]; then

    if [ -z ${args[$emailArgument]} ]; then
        echo "-e is specified but no email is provided."
        exit 1
    else
        if ! [[ ${args[$emailArgument]} =~ $EMAIL_REGEX ]]; then
            echo "Email provided is not valid."
            exit 1
        else
            selectedEmail=${args[$emailArgument]}
        fi
    fi
fi

if ! [ -z "$algorithmArgument" ]; then

    if [ -z ${args[$algorithmArgument]} ]; then
        echo "-a is specified but no algorithm is provided."
        exit 1
    fi

    if [[ ! " ${sshAlgorithms[@]} " =~ " ${args[$algorithmArgument]} " ]]; then
        echo "Algorithm provided (${args[$algorithmArgument]}) is not suppored."
        exit 1
    fi

    for i in "${!sshAlgorithms[@]}"; do
        if [ "${sshAlgorithms[$i]}" = "${args[$algorithmArgument]}" ]; then
            selectedAlgorithm=$(($i + 1))
        fi
    done
fi

if ! [ -z "$keySizeArgument" ]; then

    if [ -z "${args[$keySizeArgument]}" ]; then
        echo "-k is specified but no key size is provided."
        exit 1
    fi

    if [ -z "$selectedAlgorithm" ]; then
        echo "-a must be specified when using -k."
        exit 1
    fi

    eval ${sshKeySizes[$(($selectedAlgorithm - 1))]}

    if ! [ "${#keySizes[@]}" = 0 ]; then
        if [[ ! " ${keySizes[@]} " =~ " ${args[$keySizeArgument]} " ]]; then
            echo "Keysize provided (${args[$keySizeArgument]}) is not suppored."
            exit 1
        fi

        for i in "${!keySizes[@]}"; do
            if [ "${keySizes[$i]}" = "${args[$keySizeArgument]}" ]; then
                selectedKeySize=$(($i + 1))
            fi
        done
    fi
fi

if ! [ -z "$fileArgument" ]; then
    if [ -z "${args[$fileArgument]}" ]; then
        echo "-f is specified but no file is provided."
        exit 1
    fi

    if [ -d $(dirname $(readlink -f $fileArgument)) ]; then
        if [ -d $(readlink -f $fileArgument) ]; then
            echo "$(readlink -f $fileArgument) is a directory, please specify a file."
            exit 1
        fi

        if [ -f $(readlink -f $fileArgument) ]; then
            if [ "$replaceSSHKey" = false ]; then
                echo "$(readlink -f $fileArgument) already exists. To replace it run the command with -f"
                exit 1
            fi
        fi
    fi

    selectedFile=${args[$fileArgument]}
fi

if [ -z $selectedEmail ]; then

    userInputFinished=false

    while [ "$userInputFinished" = false ]; do

        printf "Please enter email for ssh-key: "
        read selectedEmail

        if [ -z "$selectedEmail" ]; then
            printf "\nEmail cannot be blank \n\n"
        elif ! [[ $selectedEmail =~ $EMAIL_REGEX ]]; then
            printf "\nEmail provided is invalid.\n\n"
        else
            userInputFinished=true
        fi

    done
fi

if [ -z "$selectedAlgorithm" ]; then

    printf "Supported algorithms: \n"
    for i in "${!sshAlgorithms[@]}"; do
        printf " - (%d) %s\n" "$(($i + 1))" "${sshAlgorithms[$i]}"
    done

    userInputFinished=false

    while [ "$userInputFinished" = false ]; do

        printf "Enter desired ssh algorithm (1-${#sshAlgorithms[@]}): "
        read selectedAlgorithm

        if ! [[ $selectedAlgorithm =~ $NUMBER_REGEX ]]; then
            printf "\nPlease enter a number.\n\n"
        else
            if [ $(($selectedAlgorithm)) \> ${#sshAlgorithms[@]} ]; then
                printf "\nPlease enter a number <= ${#sshAlgorithms[@]}\n\n"
            elif [ $(($selectedAlgorithm)) \< 1 ]; then
                printf "\nPlease enter a number >= 1\n\n"
            else
                userInputFinished=true
            fi
        fi
    done
fi

#selectedAlgorithm=$(($selectedAlgorithm - 1))

if [ -z "$selectedKeySize" ]; then

    eval ${sshKeySizes[$(($selectedAlgorithm - 1))]}

    if ! [ "${#keySizes[@]}" = 0 ]; then

        printf "Supported key sizes:\n"
        for i in "${!keySizes[@]}"; do
            printf " - (%d) %s\n" "$(($i + 1))" "${keySizes[$i]}"
        done

        userInputFinished=false

        while [ "$userInputFinished" = false ]; do
            printf "Select desired key size (1-${#keySizes[@]}): "
            read selectedKeySize

            if ! [[ $selectedKeySize =~ $NUMBER_REGEX ]]; then
                printf "\nPlease enter a number.\n\n"
            else
                if [ $(($selectedKeySize)) \> ${#keySizes[@]} ]; then
                    printf "\nPlease enter a number <= ${#keySizes[@]}\n\n"
                elif [ $(($selectedKeySize)) \< 1 ]; then
                    printf "\nPlease enter a number >= 1\n\n"
                else
                    userInputFinished=true
                fi
            fi
        done
    fi
fi

if ! [ -z $selectedKeySize ]; then
    selectedKeySize=${keySizes[$(($selectedKeySize - 1))]}
fi
selectedAlgorithm=${sshAlgorithms[$(($selectedAlgorithm - 1))]}

if [ -z "$selectedFile" ]; then

    userInputFinished=false

    while [ "$userInputFinished" = false ]; do

        printf "Enter file for ssh key (default: $HOME/.ssh/id_$selectedAlgorithm): "
        read selectedFile

        if [ -z "$selectedFile" ]; then
            selectedFile="$HOME/.ssh/id_$selectedAlgorithm"
        else
            eval selectedFile=$selectedFile
        fi

        if [ -d $(dirname "$(readlink -f $selectedFile)") ]; then
            if [ -d $(readlink -f $selectedFile) ]; then
                printf "\n$(readlink -f $selectedFile) is a directory, please specify a file.\n\n"
                continue
            fi

            if [ -f $(readlink -f $selectedFile) ] && [ "$replaceSSHKey" = false ]; then
                subUserInputFinished=false
                while [ "$subUserInputFinished" = false ]; do
                    printf "File $(readlink -f $selectedFile) already exists, would you like to replace it (y/n)? "
                    read replaceFile

                    if [ "$replaceFile" = "y" ] || [ "$replaceFile" = "Y" ]; then
                        rm "$(readlink -f $selectedFile)"
                        rm "$(readlink -f $selectedFile).pub"
                        subUserInputFinished=true
                        userInputFinished=true
                    elif [ "$replaceFile" = "n" ] || [ "$replaceFile" = "N" ]; then
                        subUserInputFinished=true
                    else
                        printf "\nUnrecognized input\n\n"
                    fi
                done

                if [ "$replaceFile" = "n" ] || [ "$replaceFile" = "N" ]; then
                    continue
                fi
            fi
        fi

        if ! [ "$(readlink -f $selectedFile)" = "$HOME/.ssh/id_$selectedAlgorithm" ]; then
            printf "You have selected $(readlink -f $selectedFile), is that correct (y/n)? "
            read isFileCorrect

            if [ "$isFileCorrect" = "y" ] || [ "$isFileCorrect" = "Y" ]; then
                userInputFinished=true
            fi
        else
            userInputFinished=true
        fi
    done
fi

if [ -z $selectedKeySize ]; then
    ssh-keygen -t "$selectedAlgorithm" -C "$selectedEmail" -f "$(readlink -f "$selectedFile")"
else
    ssh-keygen -t "$selectedAlgorithm" -b "$selectedKeySize" -C "$selectedEmail" -f "$(readlink -f "$selectedFile")"
fi

if ! [ "$(readlink -f $selectedFile)" = "$HOME/.ssh/id_$selectedAlgorithm" ]; then

    echo "Would you like to have this automatically added to ssh-agent (y/n)?"
    read autoAddtoAgent

    if [ "$autoAddtoAgent" = "y" ] || [ "$autoAddtoAgent" = "Y" ]; then
        grep -qxF "$(readlink -f $selectedFile)" ~/.user-setup/user-ssh-keys.txt || echo "$(readlink -f $selectedFile)" >> ~/.user-setup/user-ssh-keys.txt
        ssh-add "$(readlink -f $selectedFile)"
    else
        echo "The key will not be added automatically."
    fi
fi

if [ "$displayKeyWhenDone" = true ]; then
    echo "This is the public key you can provide to servers and such:"
    cat "$(readlink -f $selectedFile).pub"
fi